#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 29 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 56 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 -1 1 #"\0"
0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1           0 1693 0 17 3 41
#"; A simple parser for a Java-ish language"
0 0 22 29 1 #"\n"
0 0 17 3 31 #"; CS 356: Programming Languages"
0 0 22 29 1 #"\n"
0 0 17 3 1 #";"
0 0 22 29 1 #"\n"
0 0 17 3 79
(
 #"; A recursive descent parser and a lexical analyzer for simple Java "
 #"statements."
) 0 0 22 29 1 #"\n"
0 0 17 3 79
(
 #"; The language allows assignments, all mathematical expressions, if "
 #"statements,"
) 0 0 22 29 1 #"\n"
0 0 17 3 54 #"; while statement with break and continue, and blocks."
0 0 22 29 1 #"\n"
0 0 17 3 1 #";"
0 0 22 29 1 #"\n"
0 0 17 3 26 #"; To call the parser, use:"
0 0 22 29 1 #"\n"
0 0 17 3 23 #";     (parser filename)"
0 0 22 29 1 #"\n"
0 0 17 3 1 #";"
0 0 22 29 1 #"\n"
0 0 17 3 49 #"; The return value is a parse tree in list format"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"load"
0 0 22 3 1 #" "
0 0 19 3 9 #"\"lex.scm\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 6 #"parser"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 8 #"filename"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 5 #"begin"
0 0 22 3 2 #" ("
0 0 14 3 9 #"start-lex"
0 0 22 3 1 #" "
0 0 14 3 8 #"filename"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (("
0 0 14 3 10 #"parse-tree"
0 0 22 3 2 #" ("
0 0 14 3 13 #"program-parse"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 7 #"end-lex"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"             "
0 0 14 3 10 #"parse-tree"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 48 #";==============================================="
0 0 22 29 1 #"\n"
0 0 17 3 30 #"; The recursive descent parser"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 13 #"program-parse"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 3 #" ()"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 15 #"get-next-symbol"
0 0 22 3 3 #")) "
0 0 20 3 1 #"'"
0 0 14 3 3 #"EOF"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 20 3 1 #"'"
0 0 22 3 2 #"()"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 15 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 17 #"unget-next-symbol"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (("
0 0 14 3 9 #"parsetree"
0 0 22 3 2 #" ("
0 0 14 3 15 #"statement-parse"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 14 3 4 #"cons"
0 0 22 3 1 #" "
0 0 14 3 9 #"parsetree"
0 0 22 3 2 #" ("
0 0 14 3 13 #"program-parse"
0 0 22 3 7 #")))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 91
(
 #"; parse a statement that can be an if-statement, a while-statement, "
 #"or a compound statement"
) 0 0 22 29 1 #"\n"
0 0 17 3 52 #"; and if none of the above, it is a simple statement"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 15 #"statement-parse"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 3 #" ()"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (("
0 0 14 3 10 #"nextsymbol"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 15 #"get-next-symbol"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 14 3 10 #"nextsymbol"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"if"
0 0 22 3 3 #") ("
0 0 14 3 8 #"if-parse"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 15 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 17 #"unget-next-symbol"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 22 #"simple-statement-parse"
0 0 22 3 7 #")))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 92
(
 #"; parse a simple statement that can be a return, break, continue, or"
 #" an assignment statement"
) 0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 22 #"simple-statement-parse"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 3 #" ()"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (("
0 0 14 3 10 #"nextsymbol"
0 0 22 3 2 #" ("
0 0 14 3 15 #"get-next-symbol"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 15 #"parse-statement"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 4 #"()))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 15 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 15 3 4 #"cond"
0 0 22 3 3 #" (("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 10 #"nextsymbol"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 6 #"return"
0 0 22 3 3 #") ("
0 0 14 3 4 #"set!"
0 0 22 3 1 #" "
0 0 14 3 15 #"parse-statement"
0 0 22 3 2 #" ("
0 0 14 3 12 #"return-parse"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"              (("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 10 #"nextsymbol"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 3 #"var"
0 0 22 3 3 #") ("
0 0 14 3 4 #"set!"
0 0 22 3 1 #" "
0 0 14 3 15 #"parse-statement"
0 0 22 3 2 #" ("
0 0 14 3 13 #"declare-parse"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 15 3 5 #"begin"
0 0 22 3 2 #" ("
0 0 14 3 17 #"unget-next-symbol"
0 0 22 3 3 #") ("
0 0 14 3 4 #"set!"
0 0 22 3 1 #" "
0 0 14 3 15 #"parse-statement"
0 0 22 3 2 #" ("
0 0 14 3 12 #"assign-parse"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 15 #"get-next-symbol"
0 0 22 3 3 #")) "
0 0 20 3 1 #"'"
0 0 14 3 9 #"SEMICOLON"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"             "
0 0 14 3 15 #"parse-statement"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"parser"
0 0 22 3 1 #" "
0 0 19 3 19 #"\"Missing semicolon\""
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 55 #"; parse a return statement: return followed by a value."
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 12 #"return-parse"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 3 #" ()"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"return"
0 0 22 3 2 #" ("
0 0 14 3 11 #"value-parse"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 94
(
 #"; parse an if statement: a condition inside parentheses, an if state"
 #"ment, and an optional else"
) 0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 8 #"if-parse"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 3 #" ()"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 15 #"get-next-symbol"
0 0 22 3 3 #")) "
0 0 20 3 1 #"'"
0 0 14 3 9 #"LEFTPAREN"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"parser"
0 0 22 3 1 #" "
0 0 19 3 29 #"\"Missing opening parenthesis\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (("
0 0 14 3 9 #"condition"
0 0 22 3 2 #" ("
0 0 14 3 11 #"value-parse"
0 0 22 3 5 #")))  "
0 0 17 3 9 #"; changed"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 15 #"get-next-symbol"
0 0 22 3 3 #")) "
0 0 20 3 1 #"'"
0 0 14 3 10 #"RIGHTPAREN"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"parser"
0 0 22 3 1 #" "
0 0 19 3 29 #"\"Missing closing parenthesis\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (("
0 0 14 3 12 #"if-statement"
0 0 22 3 2 #" ("
0 0 14 3 15 #"statement-parse"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 15 #"get-next-symbol"
0 0 22 3 3 #")) "
0 0 20 3 1 #"'"
0 0 14 3 4 #"else"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"if"
0 0 22 3 1 #" "
0 0 14 3 9 #"condition"
0 0 22 3 1 #" "
0 0 14 3 12 #"if-statement"
0 0 22 3 2 #" ("
0 0 14 3 15 #"statement-parse"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ("
0 0 15 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 25 #"                        ("
0 0 14 3 17 #"unget-next-symbol"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 25 #"                        ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"if"
0 0 22 3 1 #" "
0 0 14 3 9 #"condition"
0 0 22 3 1 #" "
0 0 14 3 12 #"if-statement"
0 0 22 3 9 #")))))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 83
(
 #"; parse a condition: a value followed by a comparison operator follo"
 #"wed by a value."
) 0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 10 #"cond-parse"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 3 #" ()"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 15 3 4 #"let*"
0 0 22 3 3 #" (("
0 0 14 3 12 #"firstoperand"
0 0 22 3 2 #" ("
0 0 14 3 11 #"value-parse"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 1 22 65 1 #"\t"
0 0 22 3 5 #"    ("
0 0 14 3 2 #"op"
0 0 22 3 2 #" ("
0 0 14 3 15 #"get-next-symbol"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 9 #"BINARY-OP"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 2 #"or"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 2 #"=="
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                    ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 1 #"<"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                    ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 1 #">"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                    ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 2 #"<="
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                    ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 2 #">="
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                    ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 2 #"!="
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 1 22 65 1 #"\t"
0 0 22 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 14 3 12 #"firstoperand"
0 0 22 3 2 #" ("
0 0 14 3 11 #"value-parse"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"parser"
0 0 22 3 1 #" "
0 0 19 3 29 #"\"Unknown comparison operator\""
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 91
(
 #"; parse a variable declaration: var then left-hand-side with optiona"
 #"l = followed by a value"
) 0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 13 #"declare-parse"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 3 #" ()"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 4 #"let*"
0 0 22 3 3 #" (("
0 0 14 3 3 #"lhs"
0 0 22 3 2 #" ("
0 0 14 3 9 #"lhs-parse"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 14 3 2 #"op"
0 0 22 3 2 #" ("
0 0 14 3 15 #"get-next-symbol"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 9 #"BINARY-OP"
0 0 22 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 1 #"="
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 6 #"append"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"var"
0 0 22 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 22 3 3 #") ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 11 #"value-parse"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 15 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 17 #"unget-next-symbol"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 4 #"cons"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"var"
0 0 22 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 86
(
 #"; parse an assignment statement: a left-hand-side followed by an = f"
 #"ollowed by a value"
) 0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 12 #"assign-parse"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 3 #" ()"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 4 #"let*"
0 0 22 3 3 #" (("
0 0 14 3 3 #"lhs"
0 0 22 3 2 #" ("
0 0 14 3 9 #"lhs-parse"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 14 3 2 #"op"
0 0 22 3 2 #" ("
0 0 14 3 15 #"get-next-symbol"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 9 #"BINARY-OP"
0 0 22 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 1 #"="
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 6 #"append"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 14 3 3 #"lhs"
0 0 22 3 3 #") ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 11 #"value-parse"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"parser"
0 0 22 3 1 #" "
0 0 19 3 29 #"\"Unknown assignment operator\""
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 73
(
 #"; parse the left hand side of an assignment.  Only variables are all"
 #"owed."
) 0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 9 #"lhs-parse"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 3 #" ()"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (("
0 0 14 3 3 #"lhs"
0 0 22 3 2 #" ("
0 0 14 3 15 #"get-next-symbol"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 2 #"ID"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"parser"
0 0 22 3 1 #" "
0 0 19 3 38 #"\"Illegal left hand side of assignment\""
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 72
(
 #"; parse a value.  The top level of the parse is the assignment opera"
 #"tor."
) 0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 11 #"value-parse"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 3 #" ()"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 4 #"let*"
0 0 22 3 3 #" (("
0 0 14 3 3 #"lhs"
0 0 22 3 2 #" ("
0 0 14 3 15 #"get-next-symbol"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 14 3 2 #"op"
0 0 22 3 2 #" ("
0 0 14 3 15 #"get-next-symbol"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 2 #"ID"
0 0 22 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 9 #"BINARY-OP"
0 0 22 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 1 #"="
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 22 3 3 #") ("
0 0 14 3 11 #"value-parse"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 15 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 17 #"unget-next-symbol"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 12 #"orterm-parse"
0 0 22 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 68
#"; continuing parsing the value.  The second level is the OR operator"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 12 #"orterm-parse"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 11 #"firstsymbol"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 19 #"orterm-parse-helper"
0 0 22 3 2 #" ("
0 0 14 3 13 #"andterm-parse"
0 0 22 3 1 #" "
0 0 14 3 11 #"firstsymbol"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 26 #"; parse the OR expression."
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 19 #"orterm-parse-helper"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 12 #"firstoperand"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (("
0 0 14 3 2 #"op"
0 0 22 3 2 #" ("
0 0 14 3 15 #"get-next-symbol"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 9 #"BINARY-OP"
0 0 22 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 4 #"\\|\\|"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 19 #"orterm-parse-helper"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"||"
0 0 22 3 1 #" "
0 0 14 3 12 #"firstoperand"
0 0 22 3 2 #" ("
0 0 14 3 13 #"andterm-parse"
0 0 22 3 2 #" ("
0 0 14 3 15 #"get-next-symbol"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 15 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 17 #"unget-next-symbol"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"            "
0 0 14 3 12 #"firstoperand"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 39 #"; the third level is the AND expression"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 13 #"andterm-parse"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 11 #"firstsymbol"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 20 #"andterm-parse-helper"
0 0 22 3 2 #" ("
0 0 14 3 15 #"equalterm-parse"
0 0 22 3 1 #" "
0 0 14 3 11 #"firstsymbol"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 27 #"; parse the AND expression."
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 20 #"andterm-parse-helper"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 12 #"firstoperand"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (("
0 0 14 3 2 #"op"
0 0 22 3 2 #" ("
0 0 14 3 15 #"get-next-symbol"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 9 #"BINARY-OP"
0 0 22 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 2 #"&&"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 20 #"andterm-parse-helper"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 14 3 12 #"firstoperand"
0 0 22 3 2 #" ("
0 0 14 3 15 #"equalterm-parse"
0 0 22 3 2 #" ("
0 0 14 3 15 #"get-next-symbol"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 15 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 17 #"unget-next-symbol"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"            "
0 0 14 3 12 #"firstoperand"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 39 #"; the next level is the equal operators"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 15 #"equalterm-parse"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 11 #"firstsymbol"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 22 #"equalterm-parse-helper"
0 0 22 3 2 #" ("
0 0 14 3 17 #"compareterm-parse"
0 0 22 3 1 #" "
0 0 14 3 11 #"firstsymbol"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 30 #"; parse the equals expression."
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 22 #"equalterm-parse-helper"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 12 #"firstoperand"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (("
0 0 14 3 2 #"op"
0 0 22 3 2 #" ("
0 0 14 3 15 #"get-next-symbol"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 9 #"BINARY-OP"
0 0 22 3 3 #") ("
0 0 14 3 2 #"or"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 2 #"=="
0 0 22 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 2 #"!="
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 22 #"equalterm-parse-helper"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 14 3 12 #"firstoperand"
0 0 22 3 2 #" ("
0 0 14 3 17 #"compareterm-parse"
0 0 22 3 2 #" ("
0 0 14 3 15 #"get-next-symbol"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 15 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 17 #"unget-next-symbol"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"            "
0 0 14 3 12 #"firstoperand"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 39 #"; next we have the comparison operators"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 17 #"compareterm-parse"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 11 #"firstsymbol"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 24 #"compareterm-parse-helper"
0 0 22 3 2 #" ("
0 0 14 3 13 #"addterm-parse"
0 0 22 3 1 #" "
0 0 14 3 11 #"firstsymbol"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 34 #"; parse the comparison expression."
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 24 #"compareterm-parse-helper"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 12 #"firstoperand"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (("
0 0 14 3 2 #"op"
0 0 22 3 2 #" ("
0 0 14 3 15 #"get-next-symbol"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 9 #"BINARY-OP"
0 0 22 3 3 #") ("
0 0 14 3 2 #"or"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 1 #"<"
0 0 22 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 2 #"<="
0 0 22 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 1 #">"
0 0 22 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 2 #">="
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 24 #"compareterm-parse-helper"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 14 3 12 #"firstoperand"
0 0 22 3 2 #" ("
0 0 14 3 13 #"addterm-parse"
0 0 22 3 2 #" ("
0 0 14 3 15 #"get-next-symbol"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 15 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 17 #"unget-next-symbol"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"            "
0 0 14 3 12 #"firstoperand"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 88
(
 #"; continue parsing the value.  The next level is the addition and su"
 #"btraction operators."
) 0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 13 #"addterm-parse"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 11 #"firstsymbol"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 20 #"addterm-parse-helper"
0 0 22 3 2 #" ("
0 0 14 3 14 #"multterm-parse"
0 0 22 3 1 #" "
0 0 14 3 11 #"firstsymbol"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 32 #"; parse the addition expression."
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 20 #"addterm-parse-helper"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 12 #"firstoperand"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (("
0 0 14 3 2 #"op"
0 0 22 3 2 #" ("
0 0 14 3 15 #"get-next-symbol"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 9 #"BINARY-OP"
0 0 22 3 3 #") ("
0 0 14 3 2 #"or"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 1 #"+"
0 0 22 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 1 #"-"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 20 #"addterm-parse-helper"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 14 3 12 #"firstoperand"
0 0 22 3 2 #" ("
0 0 14 3 14 #"multterm-parse"
0 0 22 3 2 #" ("
0 0 14 3 15 #"get-next-symbol"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 15 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 17 #"unget-next-symbol"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"            "
0 0 14 3 12 #"firstoperand"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 91
(
 #"; continue parsing the value.  The next level is the multiplication "
 #"and division operators."
) 0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 14 #"multterm-parse"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 11 #"firstsymbol"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 21 #"multterm-parse-helper"
0 0 22 3 2 #" ("
0 0 14 3 13 #"operand-parse"
0 0 22 3 1 #" "
0 0 14 3 11 #"firstsymbol"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 38 #"; parse the multiplication expression."
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 21 #"multterm-parse-helper"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 12 #"firstoperand"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (("
0 0 14 3 2 #"op"
0 0 22 3 2 #" ("
0 0 14 3 15 #"get-next-symbol"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 9 #"BINARY-OP"
0 0 22 3 3 #") ("
0 0 14 3 2 #"or"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 1 #"*"
0 0 22 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 1 #"/"
0 0 22 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 1 #"%"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 14 3 21 #"multterm-parse-helper"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #") "
0 0 14 3 12 #"firstoperand"
0 0 22 3 2 #" ("
0 0 14 3 13 #"operand-parse"
0 0 22 3 2 #" ("
0 0 14 3 15 #"get-next-symbol"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 15 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 17 #"unget-next-symbol"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"             "
0 0 14 3 12 #"firstoperand"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 114
(
 #"; continue parsing the value.  The final level is the unary operator"
 #"s, variables, numbers, and nested parentheses."
) 0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 13 #"operand-parse"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 11 #"firstsymbol"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"     "
0 0 17 3 39 #";(let ((firstsymbol (get-next-symbol)))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"          (("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 11 #"firstsymbol"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 9 #"LEFTPAREN"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (("
0 0 14 3 8 #"retvalue"
0 0 22 3 2 #" ("
0 0 14 3 11 #"value-parse"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 15 #"get-next-symbol"
0 0 22 3 3 #")) "
0 0 20 3 1 #"'"
0 0 14 3 10 #"RIGHTPAREN"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                  "
0 0 14 3 8 #"retvalue"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"parser"
0 0 22 3 1 #" "
0 0 19 3 28 #"\"Unmatched left parenthesis\""
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"          (("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 11 #"firstsymbol"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 9 #"BINARY-OP"
0 0 22 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 11 #"firstsymbol"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 1 #"-"
0 0 22 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"-"
0 0 22 3 2 #" ("
0 0 14 3 13 #"operand-parse"
0 0 22 3 2 #" ("
0 0 14 3 15 #"get-next-symbol"
0 0 22 3 6 #"))))  "
0 0 17 3 20 #"; this is a new line"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"          (("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 11 #"firstsymbol"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 9 #"BINARY-OP"
0 0 22 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 11 #"firstsymbol"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 1 #"!"
0 0 22 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"!"
0 0 22 3 2 #" ("
0 0 14 3 13 #"operand-parse"
0 0 22 3 2 #" ("
0 0 14 3 15 #"get-next-symbol"
0 0 22 3 6 #"))))  "
0 0 17 3 20 #"; this is a new line"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"          (("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 11 #"firstsymbol"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 6 #"NUMBER"
0 0 22 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 11 #"firstsymbol"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"          (("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 11 #"firstsymbol"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 2 #"ID"
0 0 22 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 11 #"firstsymbol"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"          (("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 11 #"firstsymbol"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 7 #"BOOLEAN"
0 0 22 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 11 #"firstsymbol"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"parser"
0 0 22 3 1 #" "
0 0 19 3 20 #"\"Unknown statmement\""
0 0 22 3 5 #")))))"
0 0 17 3 2 #";)"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0           0
